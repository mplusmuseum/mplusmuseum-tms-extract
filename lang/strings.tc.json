{
  "nav": {
    "developer": "developer",
    "config": "config",
    "upload_files": "upload files",
    "stats_and_search": "Stats &amp; Search",
    "api": "API",
    "admin": "admin",
    "login": "login",
    "logout": "logout"
  },
  "stats": {
    "stats": "stats",
    "intro": "This is where we keep a bunch of stats to keep an eye on how the server is running.",
    "link_to_logs": "You can also view some logs over on the <a href=\"/stats/logs\">logs page</a>.",
    "tms_system": "TMS systems",
    "total_objects_processed": "Total objects processed",
    "object_files_waiting": "Object files waiting to be processed",
    "total_constituents_processed": "Total constituents processed",
    "constituent_files_waiting": "Constituents files waiting to be processed",
    "lot_of_files_to_upload": "<small><br> *If you have a lot of files to upload, you can adjust this time in the <a href=\"/config#elasticsearch\">ElasticSearch section</a> of the config page.</small>",
    "results_generated_in": "Results generated in",
    "search_object": "Search object by id",
    "search_constituent": "Search constituent by id",
    "go": "go",
    "publicAccess": "Public access files",
    "remaining": "remaining"
  },
  "documentation": {
    "documentation": "GraphQL Documention",
    "intro": "Here you can find out all about how to make GraphQL calls. Remember you will need your developer key which you can always find on the main <a href=\"/developer\">Developers Help</a> page, but it's also here:",
    "note": " <strong>NOTE:</strong> This documentation is very new and evolving but should be enough to get you up and running, we will be expanding it in the near future.",
    "TOC": "Table of Contents",
    "about-graphql": "About GraphQL",
    "communicating-with-graphql": "Communicating with GraphQL",
    "graphql-playground": "GraphQL playground",
    "graphql-queries": "GraphQL Queries",
    "introspection": "Introspection",
    "objects": "Objects",
    "paginationandfilter": "Pagination and filter example",
    "sorting": "Sorting example",
    "fetchingbyids": "Fetching by ids example",
    "object": "Object",
    "areas": "Areas",
    "categories": "Categories",
    "mediums": "Mediums",
    "constituents": "Constituents",
    "constituent": "Constituent",
    "nesting": "Nesting objects in constituents and constituents in objects",
    "objects-connected-constituent": "Finding objects connected to a constituent",
    "graphql-about-1": "GraphQL is a data query language you'll use to request information from the M+ data store. Traditionally GraphQL allows two types of operations, <em>queries</em> and <em>mutations</em> these can be thought of as <em>read</em> and <em>write</em> operations.",
    "graphql-about-2": "As well as one more operation called <em><a href=\"#introspection\">introspection</a></em>, which allows you to ask the GraphQL endpoint about itself.",
    "graphql-about-3": "Below you will find examples of various calls to can make to the GraphQL endpoint.",
    "graphql-communicating-1": "The single endpoint for all GraphQL calls is...",
    "graphql-communicating-2": "GraphQL operations consist of multiline JSON, an example \"Hello World\" GraphQL query is show below:",
    "graphql-communicating-3": "To query GraphQL using cURL, make a <code>POST</code> request with a JSON payload as <code>--data-binary</code>. You must also include your API token as <code>bearer</code> authorization.",
    "graphql-communicating-4": "Using Nodejs it may look like this, making sure to pass in your API token as a <code>bearer</code> token as shown.",
    "graphql-communicating-5": "Probably the easiest way to try out GraphQL queries is to use the playground which can be found here:",
    "graphql-communicating-6": "You can see an example by clicking the \"run in the playground\" link, you will need to press the \"run\" button to see the results of the query.",
    "graphql-communicating-7": "Below you'll find a list of the current queries you can make against the data store.",
    "run-in-playground": "Run in the playground",
    "graphql-introspection-1": "The <em>introspection</em> operation is the only operation you can call using <code>GET</code>. Introspection allows you to query the GraphQL schema for details about itself. Query <code class=\"red\">__schema</code> to list all types defined in the schema and get details about each:",
    "graphql-introspection-2": "Query <code class=\"red\">__type</code> to get details about any type:",
    "graphql-objects-1": "This query selects all of the objects and can be filtered by certain fields shown below. Note: filters are <em>additive</em> rather than <em>or</em>, filtering two fields will only return records that match both.",
    "graphql-objects-2": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">sort</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">classification.area</code>, <code class=\"red\">classification.category</code>, <code class=\"red\">medium</code>, <code class=\"red\">displayDate</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code> and <code class=\"red\">lang</code>",
    "graphql-objects-3": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>objectNumber</code>, <code>sortNumber</code>, <code>title</code>, <code>displayDate</code>, <code>beginDate</code>, <code>endDate</code>, <code>classification.area</code> and <code>classification.category</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "valid-lang": "The only valid values for <code class=\"red\">lang</code> are <code>en</code>, <code>zh-hant</code> and <code>zh-hans</code>. The default is <code>en</code>, if a record doesn't have values that match the selected language then it'll return the <code>en</code> version if there is one.",
    "graphql-objects-5": "Here is the simplest call to get all object ids",
    "object-pagination": "Here we are asking for slightly more information, note how we can use the <code class=\"red\">per_page</code> filter to limit the number of results.",
    "object-sort-example": "Here is an example of sorting by <code>sortNumber</code>.",
    "object-by-ids-example": "You can also ask for specific objects by passing in an array of <code class=\"red\">ids</code>.",
    "object-1": "You can get a single object by passing in the <code class=\"red\">id</code> parameter. Here we are showing <em>all</em> the fields possible.",
    "areas-1": "You can fetch all the valid areas which you can then use to filter objects by. For example running the query below will return a handful of areas, which you would then use in an Object query with <code>(area: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the areas returned by this query.",
    "aggs-filters": "Valid filters are <code class=\"red\">per_page</code>, <code class=\"red\">lang</code>, <code class=\"red\">sort</code> and <code class=\"red\">sort_field</code>.",
    "aggs-sort": "Valid values for the <code class=\"red\">sort_field</code> are <code>title</code> and <code>count</code>. Valid values for the <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "aggs-per-page": "The <code class=\"red\">per_page</code> filter will limit the number of results, for example <code>(per_page: 10)</code> will return just 10 records. Unlike Objects you cannot paginate through the this data set.",
    "category-1": "You can fetch all the valid categories which you can then use to filter objects by. For example running the query below will return a handful of categories, which you would then use in an Object query with <code>(category: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the categories returned by this query.",
    "medium-1": "You can fetch all the valid mediums which you can then use to filter objects by. For example running the query below will return a handful of mediums, which you would then use in an Object query with <code>(medium: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the mediums returned by this query.",
    "constituents-1": "Constituents are people and institutions connected to an object, for example they may be the artists or the seller or buyer, they may be the curator or the institution the displays the object.",
    "constituents-2": "This query selects all of the constituents and can be filtered by certain fields shown below. Note: filters are <em>additive</em> rather than <em>or</em>, filtering two fields will only return records that match both.",
    "constituents-filters": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">sort</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">gender</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code>, <code class=\"red\">nationality</code> and <code class=\"red\">lang</code>",
    "constituents-sorts": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>name</code>, <code>sortNumber</code>, <code>alphaSortName</code>, <code>gender</code>, <code>beginDate</code>, <code>endDate</code> and <code>nationality</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "constituents-call-for-ids": "Here is the simplest call to get all constituent ids",
    "constituents-more-info": "Here we are asking for slightly more information, note how we can use the <code class=\"red\">per_page</code> filter to limit the number of results.",
    "constituents-sorting": "Here is an example of sorting by <code>alphaSortName</code>.",
    "constituents-by-ids-example": "You can also ask for specific constituents by passing in an array of <code class=\"red\">ids</code>.",
    "constituent-1": "You can get a single constituent by passing in the <code class=\"red\">id</code> parameter. Here we are showing <em>all</em> the fields possible.",
    "nesting-1": "When you are searching for objects you can nest a limited version of constituents in the results. If you are requesting <strong>Objects</strong> you can get the constituents with the following query.",
    "nesting-2": "If you are asking for a single Object then you can get a bit more information about the constituents, see the example below.",
    "nesting-3": "You cannot keep nesting objects and constituents beyond the first two levels, because they would just keep including each other forever.",
    "nesting-4": "You can also next constituents inside objects, but again with limited information returned and only down two levels.",
    "connected-1": "There are two ways to find objects connected to a constituent. If we wanted to find all the objects created by an artist we can run a query to find that artists and request the objects connected to the within the query, as shown below.",
    "connected-2": "You can also do a search on objects using the constituent ID as a filter. The advantage of the second way allows you to filter the results with other filters. The below query shows all the objects curated by a user with a certain medium type."
  },
  "apiterms": {
    "body": "<h1>M+公共應用程式介面簡介</h1><h2>背景</h2><p>M+積極奉行「開放取用」原則，盡量發佈更多藏品元數據。M+作為公共機構，以將博物館的知識發放至公共領域為己任。更多有關本館「開放取用」計劃的進程，可點擊<a href=\"https://medium.com/mpluslabs/towards-open-access-at-m-9dcc0ae5dce7\">這裏</a>和<a href=\"https://medium.com/mpluslabs/open-access-ahead-8dfe9984344d\">這裏</a>參閱。</p><p>我們已在<a href=\"http://github.com/mplusmuseum/collection-data\">這裏</a>發佈開放數據集，但亦會透過公共應用程式介面分享數據，以方便公眾獲取這些數據，並鼓勵不同人士發揮創意。M+應用程式介面可供任何人士使用，無論是開發者、設計師、藝術家或創作者，只要是有興趣透過數據說故事，都歡迎使用。 </p><h2>數據</h2><p>在此應用程式介面發放的數據，都是M+長時間發展和累積的成果。這些數據由策展人、藏品管理專員、研究員，以及與M+合作的學者創建，用以描述、表達和詮釋各項M+藏品。數據以CC0開放數據的形式在此應用程式介面上發佈，讓公眾運用於其網頁、應用程式和研究項目上。 </p><p>這些數據是「按其現況」發放予研究之用，在使用時應自行考量並自負風險。我們持續記錄博物館藏品的情況和最新資料，並不斷研究及擴充館藏數據，定期更新和修訂數據集。M+不會就這些數據作出任何陳述或保證。</p> <h2>技術檔案和使用權</h2><p>進入此應用程式介面前，必須到<a href=\"http://api.mplus.org.hk\">這裏</a>註冊帳戶。註冊時，閣下將獲得應用程式介面密鑰，以作調用應用程式介面之用。</p><p>請到<a href=\"https://dashboard.mplus.org.hk/developer\">這裏</a>參閱技術檔案，了解此應用程式介面的應用細節。</p><h2>使用條款</h2><h3>一般守則</h3><ul><li>倘若閣下使用這項服務，代表閣下已接納下列條款及細則。</li><li>這些數據「按其現況」發放予研究、學習及探究之用，在使用時應自行考量並自負風險。</li><li>使用應用程式介面上發佈的資料時，不得誤導別人或歪曲數據。 </li><li>不可使用M+商標或衍生自M+品牌的任何表現形式，或聲稱、暗示M+認可閣下對此應用程式介面上發佈的數據之用途。</li><li>若閣下變更、翻譯，或以任何其他形式修改這些數據時，請務必清楚說明這些資料曾被更改。若閣下擴充或修改資料，請考慮以不設重用限制的方式發佈。</li><li>在得到M+明確書面許可前，不得在網頁上使用M+標誌或品牌。</li><li>M+有權隨時增訂或修改條款及細則。</li></ul><h3>注意事項</h3><ul><li>M+懇請閣下在使用此應用程式介面的數據時，以電郵通知我們，並提供項目的網上連結，及描述閣下如何運用此服務</li><li>M+亦懇請閣下盡可能確認資料來源或標註出處為M+。如閣下使用數據集，請在引用資料時用以下方式註明</li><ul><li>數碼物件識別碼[####]</li><li>正式地確認來源或標註出處：「資料來源：M+，香港」及</li><li>M+網址的連結：mplus.org.hk</li></ul></li><li>M+定期更新在此應用程式介面所發佈的數據。建議閣下定期刷新內容，並不要緩存或儲存應用程式介面回傳的內容超過兩個星期。若閣下的應用程式要求長期緩存數據的話，請聯絡我們。</li><li>我們有權隨時停止或改動應用程式介面服務。</li><li>我們有權封鎖或取消閣下使用應用程式介面服務，恕不另行通知。</li><li>雖然應用程式介面上的數據已註冊為CC0開放數據，應用程式介面服務只供非商業用途。若你計劃將此服務用作商業用途，請與我們聯絡。</li><li>請尊重其他應用程式介面使用者，將調用應用程式介面的數目限於每日最多3,000次或每秒兩次。如果你超出速率上限，我們有權限制或停止閣下的使用權。</li></ul><p>本指引的作者謹此鳴謝<a href=\"http://github.com/harvardartmuseums/\">哈佛藝術博物館</a>和<a href=\"https://github.com/cooperhewitt/collection\">庫珀休伊特設計博物館</a>。</p><h2>聯絡我們</h2><p>如有關於此應用程式介面的問題，請將電郵發送到<a href=\"mailto:stories@mplus.org.hk\">這裏</a>與我們聯絡</p>"
  }
}